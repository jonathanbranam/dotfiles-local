set hlsearch
set ignorecase
set smartcase

if &history < 1000
  set history=1000
endif

" <LocalLeader>
let maplocalleader = ","

" ag is NOT fast enough that CtrlP doesn't need to cache
let g:ctrlp_use_caching = 1

" https://github.com/junegunn/seoul256.vim
let g:seoul256_background = 233
colo seoul256

" CtrlP: ignore elixir deps folder
set wildignore+=*/deps/*

" Ale
let g:ale_fixers = {'python': ['isort']}

" I like to use the mouse to scroll!
set mouse=a
" this is nice but it also kills tmux highlighting...
"noremap <LeftMouse> <LeftDrag>
" not sure this second line is necessary
"noremap! <LeftMouse> <LeftDrag>

" beorg only supports a single org folder
" let g:org_agenda_files=['~/Dropbox/personal/org/*.org']
let g:org_agenda_files=[
  \ '~/Dropbox/personal/org/*.org'
  \ ]

" let g:org_todo_keywords=['TODO', 'FEEDBACK', 'VERIFY', '|', 'DONE', 'DELEGATED']

let g:org_todo_keywords = [
  \ ['TODO(t)', 'URGENT(u)', 'WAITING(w)', '|', 'DONE(d)'],
  \ ['PROJECT(p)', 'SOMEDAY(s)', '|', 'COMPLETE(c)'],
  \ ['CANCELED(x)']]

  " \ ['REPORT(r)', 'BUG(b)', 'KNOWNCAUSE(k)', '|', 'FIXED(f)'],

" utl
let g:utl_cfg_hdl_scm_http_system = "Start! open '%u'"
let g:utl_cfg_hdl_mt_generic = "Start! open '%u'"
" from utl help
" let g:utl_cfg_hdl_scm_http_system = "!open '%u'"

" Adapted from
" https://vim.fandom.com/wiki/Search_for_current_word_in_multiple_files
nnoremap gr :Rg '\b<cword>\b'<CR>

" highlight previously pasted text
" https://vim.fandom.com/wiki/Selecting_your_pasted_text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Toggle word wrap on/off
nnoremap <Leader>w :set formatoptions-=t<CR>
nnoremap <Leader>W :set formatoptions+=t<CR>

" Directories to hide in NERDTree
let g:NERDTreeIgnore = ['^node_modules$', '__pycache__', '__pypackages__']

" Cycle to MRU buffers using minibug
" This isn't working for some reason - iTerm2 had these bound maybe they aren't
" passing through
" nnoremap <C-TAB>   :MBEbf<CR>
" nnoremap <C-S-TAB> :MBEbb<CR>
" nnoremap <Leader>l :MBEbf<CR>
" nnoremap <Leader>h :MBEbb<CR>

" copy relative filepath to system clipboard
nnoremap <leader>cf :let @+=expand("%")<CR>
" copy relative filepath to system clipboard with cwd
nnoremap <leader>cF :let @+=fnamemodify(getcwd(), ":t") . "/" . expand("%")<CR>
" copy filepath with line number to system clipboard
nnoremap <leader>cl :let @+=expand("%") . ":" . line(".")<CR>
" copy filepath with line number to system clipboard with cwd
nnoremap <leader>cL :let @+=fnamemodify(getcwd(), ":t") . "/" . expand("%") . ":" . line(".")<CR>
" copy absolute filepath to system clipboard
" nnoremap <leader>cF :let @+=expand("%:p")<CR>
" copy filename
" <leader>ct is bound to ctags maybe
" nnoremap <leader>ct :let @+=expand("%:t")<CR>
" copy github path to system clipboard
nnoremap <leader>cg :let @+="https://github.com/lifeomic/" . fnamemodify(getcwd(), ":t") . "/blob/master/" . expand("%") . "#L" . line(".")<CR>

" Lookup file in NERDTree
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

" a ab( abc

" Macros and tools to converts from ava to jest
" I'm not sure where to put these or how to organize but I want to save them
" somehow
" NOTES:
" wb - go to beginning of current word
" <space>b - go to beginning of current word
let @c = '/expect(.*\.callCount).toBe(\d*)/\.callCount)dt)f.lct(toBeCalledTimes€ýa'
let @a = '0/expect(.*\.called)\.toBe(true);/\.called).toBe(trueC).toHaveBeenCalled();'
let @n = '0/expect(.*\.notCalled).toBe(true)/\.notCalledC).not.toHaveBeenCalled();€ýa'
let @f = '0/expect(\w*\.called).toBe(false);$/\.called)C).not.toHaveBeenCalled();€ýa'
let @g = '0/\.getCall(\d*)cf(.mock.calls[f)r]'
let @e = 'wbiwhen(ea)'
let @p = '/await new promise(resolve =>.*, {}, (error) => {cf expect(€ýaf(a(€ýaf i, reject)€ýa/errorf)i, result€ýaAif (error) {reject(error);} else {resolve(result);})).resolves(''success'');€ýa/expect(error).tobe(null)dd/resolve(true);ddddkV?resolves(''success''j<€ýa'

" TODO: move these into vim commands.org
" https://learnvim.irian.to/basics/search_and_substitute
" .getCall(n).args[m] => .mock.calls[n][m]
" :%s/\.getCall(\(.*\))\.args\[\(.*\)\]/.mock.calls[\1][\2]/g
"
" expect(blah.called).toBeTruthy()
" expect(blah.called).toBe(true) => expect(blah).toHaveBeenCalled()
" :%s/\.called).tobe\(truthy()\|(true)\)/).toHaveBeenCalled()/g
"
" expect(blah.called).toBe(false) => expect(blah).not.toHaveBeenCalled()
" expect(blah.notCalled).toBe(false) => expect(blah).toHaveBeenCalled()
"
" expect(blah.notCalled).toBeTruthy()
" expect(blah.notCalled).toBe(true) => expect(blah).toHaveBeenCalled()
" :%s/\.notcalled).tobe\(truthy()\|(true)\)/).not.toHaveBeenCalled()/g
"
" This works with jest-when:
" mock.withArgs(a, b, c).returns(x, y, z) =>
" mock.calledWith(a, b, c).mockReturnValue(x, y, z)
" Also need to surround mock with when(mock)
" :%s/\.withArgs(\(.*\))\.returns(\(.*\))/.calledWith(\1).mockReturnValue(\2)/
"
" This works assuming onCalls are in order. It adds async which may or may not
" be necessary
" :%s/\.onCall(\(.*\))\.callsFake(/.mockImplementationOnce(async/gc
" :%s/expect(\(.*\)\.callCount)\.toBe(\(\d*\));/expect(\1).toHaveBeenCalledTimes(\2);/g
"
" t.context.sandbox.stub(method, name) => jest.spyOn(method, name)
" :%s/t\.context\.sandbox\.stub(\(.*\), \(.*\))/jest.spyOn(\1, \2)/g
"
" When changing from stubbing prototypes to a class mock
" :h sub-replace-special
" :%s/Job.prototype.\(.*\)/mockJob\u\1/gc
"
" \zs and \ze start and end of match
"
" Build a file list in args
" :args *.js
" " do something in all files
" :argdo substitution
" " save all the files
" :argdo update 
